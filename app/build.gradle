plugins {
    id 'application'
    id 'maven-publish'
    id 'signing'
    id 'org.jreleaser' version '1.0.0-M2'
    //id 'org.graalvm.buildtools.native' version '0.9.11'
}

apply plugin: 'maven-publish'
apply from: "$rootDir/gradle/versioning.gradle"

sourceCompatibility = 11
targetCompatibility = 11

compileJava {
    options.compilerArgs.addAll(['--release', '11'])
}

// "The package javax.xml.transform.stream is accessible from more than one module: <unnamed>, java.xml"
configurations {
    all*.exclude group: 'xml-apis'
}

group = 'io.github.sogis'
def myArtifactId = "pdf4oereb"

repositories {
    mavenCentral()
}

configurations {
    jar.archiveName = artifactId+"-"+version+".jar"
}

dependencies {
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'org.slf4j:slf4j-simple:1.7.36'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'net.sf.saxon:Saxon-HE:10.6'
    implementation 'org.apache.xmlgraphics:fop:2.7'
    implementation 'net.sf.offo:fop-hyph:2.0' 
    implementation 'org.locationtech.jts:jts-core:1.18.2'
    implementation 'org.apache.httpcomponents.core5:httpcore5:5.1.3'
    
    testImplementation 'org.apache.pdfbox:pdfbox:2.0.26'
}

testing {
    suites {
        test {
            useJUnitJupiter('5.8.1')
        }
    }
}

distZip {
    archiveName myArtifactId + '-'  + project.version.toString() + '.zip'
}

distTar {
    archiveName myArtifactId + '-'  + project.version.toString() + '.gzip'
}

tasks.distTar {
    compression = Compression.GZIP
}

application {
    mainClass = 'ch.so.agi.oereb.pdf4oereb.App'
}

startScripts {
   applicationName = myArtifactId
}

run {
    //args = ["--xml", "src/test/data/ne/20220125_70_2364_geom_images.xml", "--out", "/Users/stefan/tmp/pdf4oereb", "--lang", "de"]          
    //args = ["--xml", "src/test/data/bl/CH175978021788_geom_images.xml", "--out", "/Users/stefan/tmp/pdf4oereb", "--lang", "de"]   
    //args = ["--xml", "src/test/data/so/CH955832730623_geometry_images.xml", "--out", "/Users/stefan/tmp/pdf4oereb", "--lang", "it"]
    //args = ["--xml", "src/test/data/so/CH185532067274_geometry_wms.xml", "--out", "/Users/stefan/tmp/pdf4oereb", "--lang", "it"]
    //args = ["--xml", "src/test/data/so/CH870679603216_geom_images_ohne_punkt.xml", "--out", "/Users/stefan/tmp/pdf4oereb", "--lang", "de"]
    //args = ["--xml", "src/test/data/so/CH870679603216_geom_images_einzelschutz.xml", "--out", "/Users/stefan/tmp/pdf4oereb", "--lang", "de"]
    //args = ["--xml", "src/test/data/bl/CH344982777421_geometry_wms.xml", "--out", "/tmp/", "--lang", "it"]
    //args = ["--xml", "src/test/data/bl/CH344982777421_geometry_wms.xml", "--out", "/Users/stefan/tmp/pdf4oereb/", "--lang", "it"]
    args = ["--xml", "src/test/data/sh/CH715491087818_geometry_images.xml", "--out", "/Users/stefan/tmp/pdf4oereb/", "--lang", "de"]
}

/*
graalvmNative {
    binaries {
        main {
            imageName = 'pdf4oereb' // The name of the native image, defaults to the project name
            mainClass = 'ch.so.agi.oereb.pdf4oereb.App' // The main class to use, defaults to the application.mainClass
            debug = true // Determines if debug info should be generated, defaults to false
            verbose = true // Add verbose output, defaults to false
            fallback = false // Sets the fallback mode of native-image, defaults to false

            // Advanced options
            //buildArgs.add('-H:Extra') 
            jvmArgs.add("-Djava.awt.headless=false")

            agent {
                enabled = true 
            }
        }
    }
}
*/

task sourcesJar(type: Jar, dependsOn: classes) {
    baseName myArtifactId
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc.failOnError = false
task javadocJar(type: Jar, dependsOn: javadoc) {
    baseName myArtifactId
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId = group
            artifactId = myArtifactId

            pom {
                name = "pdf4oereb"
                url = "https://github.com/sogis/pdf4oereb"
                description = myArtifactId
                scm {
                    connection = "scm:git:https@github.com/sogis/pdf4oereb"
                    developerConnection = "scm:git:https@github.com/sogis/pdf4oereb"
                    url = "https://github.com/sogis/pdf4oereb"
                }
                licenses {
                    license {
                        name = "MIT"
                        url = "https://github.com/sogis/pdf4oereb/blob/master/LICENSE"
                    }
                }
                developers {
                    developer {
                        id = "edigonzales"
                        name = "Stefan Ziegler"
                    }
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

jreleaser {
    gitRootSearch = true
    
    project {
        name = myArtifactId
        description = 'pdf4oereb transforms a PLR DATA-Extract XML document version 2 into the corresponding PDF document.'
        website = 'https://agi.so.ch'
        authors = ['edigonzales']
        license = 'MIT'
        licenseUrl = "https://github.com/sogis/pdf4oereb/blob/master/LICENSE"
        docsUrl = 'https://github.com/sogis/pdf4oereb'
        copyright = '2022 AGI Kanton Solothurn'
    }
    release {
        github {
            owner = 'sogis'
            overwrite = true
            apiEndpoint = 'https://api.github.com'
        }
    }
    distributions {
        app {
            distributionType = 'JAVA_BINARY'
            artifact {
                path = "build/distributions/pdf4oereb-${version}.zip"
            }
            artifact {
                path = "build/distributions/pdf4oereb-${version}.gzip"
            }
            java {
                groupId = group
                artifactId = myArtifactId
                version = '11'
            }
        }
    }
}